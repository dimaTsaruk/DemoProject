
	=== Lambda expression ===

	Pre-defined functional Interface - allow us to invoke LEX.
	In Java we have 4 PDI

	1. Predicate
	2. Function
	3. Consumer
	4. Supplier

	! Each interface has one abstract method. All they are inside: java.util.function;
	----------------------------------------------------------------------------

	|1| =====	Predicate Interface =====

		- contains only one abstract method - test()
		- we use it to check some condition.

		interface Predicate(T) {
			public abstract boolean test();
		}

	--- Coding Part ---

	interface Predicate<T>
	{
		public abstract boolean test(T t);
	}

	=============================== #3 =================================
	--- Function interface ---

	- it has single method - apply()
	- it takes any type as param
	- return a single value of any type

	###
	    interface Function<T, R> {
	         public R apply(T);
	    }

	- Function chaining:
	andThen()
	compose()

	Summary:
	Predicate ---> Type ---> boolean
	                test()
	Function ---> Parameter Type, Return type ---> Some type
	                apply()

	=============================== #4 =================================

	 -> Consumer ---> accept()

	    - take single param as input
	    - doesn't return any value

	 -> Supplier ---> get()
	    - doesn't take any input value
	    - return some obj/elem

Summary:
    Predicate<T>    test()
    Function<T, R>  apply()
    Consumer<T>     accept()
    Supplier<R>     get()
----------------------------------------------------------------------







































